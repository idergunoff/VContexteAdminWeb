async function loadUserVersions(tryingId) {
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–π
        const response = await fetch(`/versions/${tryingId}`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        }
        const data = await response.json();
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ç—Ä–µ—Ç—å–µ–º –±–ª–æ–∫–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const header = document.getElementById('version-header');
        const versionList = document.getElementById('version-list');
        versionList.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫
        if (data.versions.length > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–µ—Ä—Å–∏–π
            header.textContent = `–í–µ—Ä—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${data.username} ‚Äî –í—Å–µ–≥–æ: ${data.count_vers}`;

            data.versions.forEach((version, index) => {
                const listItem = document.createElement('li');
                listItem.textContent = `${version.text}`;
                listItem.style.backgroundColor = version.bg_color;
                versionList.appendChild(listItem);
            });
        } else {
            versionList.innerHTML = '<li>–ù–µ—Ç –≤–µ—Ä—Å–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</li>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}


function setBgItem(index, listItem) {
    if (index >= 5000) {
        listItem.style.backgroundColor = '#f4bcfe';  // –°–≤–µ—Ç–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    } else if (index >= 2500 && index < 5000) {
        listItem.style.backgroundColor = '#aad5ff';  // –ì–æ–ª—É–±–æ–π
    } else if (index >= 500 && index < 2500) {
        listItem.style.backgroundColor = '#d6ffab';  // –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
    } else if (index >= 100 && index < 500) {
        listItem.style.backgroundColor = '#ffffbf';  // –ñ–µ–ª—Ç—ã–π
    } else if (index >= 20 && index < 100) {
        listItem.style.backgroundColor = '#ffc673';  // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    } else if (index >= 0 && index < 20) {
        listItem.style.backgroundColor = '#ff9f98';  // –ö—Ä–∞—Å–Ω—ã–π
    }
}

function logout() {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥
    window.location.href = "/logout";  // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç –≤—ã—Ö–æ–¥–∞
}


async function onWordClick(wordId) {
    try {
        const response = await fetch(`/trying/${wordId}`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        }
        const data = await response.json();
        const header = document.getElementById('trying-header');
        const userListContainer = document.getElementById('trying-list');
        userListContainer.innerHTML = ''; // –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫

        if (data.dict_result) {
            header.textContent = `–°–ª–æ–≤–æ: ${data.word} ${data.date_play} ‚Äî –í—Å–µ–≥–æ: ${Object.keys(data.dict_result).length}`;

            for (const [userId, userData] of Object.entries(data.dict_result)) {
                const listItem = document.createElement('li');
                listItem.setAttribute('title', `–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${userData.date_register}`);

                listItem.style.backgroundColor = userData.skip ? '#ffbfbf' : userData.done_tt ? '#45ece7': userData.done ? '#bfffbf' : '#f7faa6';

                let innerHTML = '';

                if (userData.user_day) innerHTML += 'üï∫';
                if (userData.user_remind) innerHTML += 'üîî';
                innerHTML += `<strong>${userData.username}</strong> - üì¶${userData.count_vers}`;

                if (userData.hint > 0) innerHTML += ` üßø${userData.hint}`;
                if (userData.hint_allusion) innerHTML += ' üíé';
                if (userData.hint_center) innerHTML += ' üåé';
                if (userData.hint_word_pixel) innerHTML += ' üñºÔ∏è';
                if (userData.hint_word_tail) innerHTML += ' ü¶é';
                if (userData.hint_word_metr) innerHTML += ' üìè';

                innerHTML += `<br>`;
                if (userData.tt_id) {
                    innerHTML += `üêõ${userData.count_vers_tt}(${userData.count_word_tt})`;
                    if (userData.hint_top_ten) innerHTML += ' üç§';
                }

                listItem.innerHTML = innerHTML;
                listItem.addEventListener('click', () => loadUserVersions(userData.t_id));
                userListContainer.appendChild(listItem);
            }
        } else {
            userListContainer.innerHTML = '<li>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É —Å–ª–æ–≤—É</li>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
document.getElementById('dropdown').addEventListener('change', async function () {
    const selectedMonth = this.value;  // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–º–µ—Å—è—Ü)

    try {
        const response = await fetch(`/month_word/${selectedMonth}`);  // –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        const data = await response.json();

        const wordList = document.getElementById('word-list');  // –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –Ω–∏–∂–µ
        wordList.innerHTML = '';  // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

        if (data.words.length > 0) {
            data.words.forEach((word, index) => {
                const listItem = document.createElement('li');
                listItem.textContent = `${word.order}. ${word.word}`;
                listItem.classList.add('word-item');  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–µ–π
                listItem.addEventListener('click', function () {
                    onWordClick(word.id);  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å–ª–æ–≤–æ
                });
                wordList.appendChild(listItem);  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–æ–∫
            });
        } else {
            wordList.innerHTML = '<li>–ù–µ—Ç —Å–ª–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü</li>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
});

